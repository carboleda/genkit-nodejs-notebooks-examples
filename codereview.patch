diff --git a/examples/ai-code-review/example-review.md b/examples/ai-code-review/example-review.md
new file mode 100644
index 0000000..e62ec76
--- /dev/null
+++ b/examples/ai-code-review/example-review.md
@@ -0,0 +1,51 @@
+```json
+{
+
+  "review": [
+    {
+      "fileName": "examples
+/ai-code-review/index.ts",
+      "summary":
+ "The code diff for `examples/ai-code-review/index.ts` primarily refactors how the Genkit AI model and prompts are configured.
+ It transitions from using `googleAI.model(\"gemini-2.0-flash\")` to the more direct `gemini20Flash
+` constant. A significant change involves moving from an inline prompt string to defining and registering an output schema (`ReviewOutputSchema`) and using a named prompt (`ai.prompt(\"codeReview\")`) for code review generation, improving modularity and
+ maintainability. Additionally, an unused `test` function has been removed from the file.",
+      "suggestions": [
+        {
+          "suggestion": "Define the `codeReview` prompt explicitly using `ai.definePrompt
+` to specify its template and input variables.",
+          "reason": "The diff introduces `ai.prompt(\"codeReview\")` and comments out the old inline prompt. While this is a good refactoring, the definition of the `codeReview` prompt (its template and input variables like `fileName`, `file
+Extension`, `diff`) is not shown in this diff. For clarity and reusability, ensure this prompt is properly defined using `ai.definePrompt` with its full template and input schema.",
+          "line": 30
+        },
+        {
+          "suggestion": "Either uncomment the usage
+ of the `response` variable (e.g., for logging the full response after stream completion) or remove `response` from the destructuring if it's not intended to be used.",
+          "reason": "The `response` variable is destructured from the `ai.generateStream` call, but
+ its usage (the `console.log`) is commented out. This leaves an unused variable.",
+          "line": 70
+        },
+        {
+          "suggestion": "Confirm that the removal of the `test` function does not hinder local testing or debugging efforts, or ensure its functionality has been
+ properly integrated elsewhere if it was still relevant.",
+          "reason": "The `test` function, which appeared to be a utility for gathering git diffs, was entirely removed. If this function served as a useful debugging tool, local testing utility, or a reference, its removal might impact the development workflow if its
+ functionality hasn't been migrated or replaced.",
+          "line": 82
+        }
+      ]
+    },
+    {
+      "fileName": "prompts/codeReview.prompt",
+      "summary": "No code was provided for review, so a detailed summary of functionality cannot be
+ given. The diff was empty.",
+      "suggestions": [
+        {
+          "suggestion": "The provided code diff was empty. Please include the code content for a comprehensive review.",
+          "reason": "No code provided"
+        }
+      ]
+    }
+  ]
+}
+
+```
\ No newline at end of file
diff --git a/examples/ai-code-review/index.ts b/examples/ai-code-review/index.ts
index 4623220..c4b5b40 100644
--- a/examples/ai-code-review/index.ts
+++ b/examples/ai-code-review/index.ts
@@ -1,5 +1,5 @@
 import { genkit, z } from "genkit";
-import { googleAI } from "@genkit-ai/googleai";
+import { googleAI, gemini20Flash } from "@genkit-ai/googleai";
 import { llama3groq } from "../../common/models";
 import { promisify } from "node:util";
 import { exec } from "node:child_process";
@@ -8,7 +8,7 @@ const execAsync = promisify(exec);
 
 const ai = genkit({
   plugins: [llama3groq(), googleAI()],
-  model: googleAI.model("gemini-2.0-flash"),
+  model: gemini20Flash,
 });
 
 const ReviewOutputSchema = z.object({
@@ -29,6 +29,8 @@ const ReviewOutputSchema = z.object({
       "Suggestions for improving the code, such as performance optimizations, readability improvements, or best practices."
     ),
 });
+ai.defineSchema("ReviewOutputSchema", ReviewOutputSchema);
+const codeReviewFilePrompt = ai.prompt("codeReview");
 
 const getGitStatusTool = ai.defineTool(
   {
@@ -72,23 +74,29 @@ const codeReviewFileTool = ai.defineTool(
     );
 
     // Generate a prompt for the AI to review the code
-    const prompt = `You are an AI code reviewer. Review the following code diff and provide a summary and suggestions for improvement:
-    Code diff for ${fileName}:
-    \`\`\`${fileExtension}
-    ${diff}
-    \`\`\`\`
-
-    Summary:
-    - Provide a brief summary of the code's functionality.
-    Suggestions:
-    - List any suggestions for improving the code, such as performance optimizations, readability improvements, or best practices.`;
-
-    // Call the AI model to generate the review
-    const { output: review } = await ai.generate({
-      prompt,
-      output: {
-        schema: ReviewOutputSchema,
-      },
+    // const prompt = `You are an AI code reviewer. Review the following code diff and provide a summary and suggestions for improvement:
+    // Code diff for ${fileName}:
+    // \`\`\`${fileExtension}
+    // ${diff}
+    // \`\`\`\`
+
+    // Summary:
+    // - Provide a brief summary of the code's functionality.
+    // Suggestions:
+    // - List any suggestions for improving the code, such as performance optimizations, readability improvements, or best practices.`;
+
+    // // Call the AI model to generate the review
+    // const { output: review } = await ai.generate({
+    //   prompt,
+    //   output: {
+    //     schema: ReviewOutputSchema,
+    //   },
+    // });
+
+    const { output: review } = await codeReviewFilePrompt({
+      fileName,
+      fileExtension,
+      diff,
     });
 
     return review;
@@ -97,7 +105,7 @@ const codeReviewFileTool = ai.defineTool(
 
 // =============== USAGE EXAMPLE ===============
 async function main() {
-  const { stream } = ai.generateStream({
+  const { stream, response } = ai.generateStream({
     prompt:
       "Make a code review of the changed files in the current git repository.",
     output: {
@@ -113,31 +121,8 @@ async function main() {
   for await (const chunk of stream) {
     console.log(chunk.text);
   }
+
+  // console.log("Code Review Results:", (await response).data.review);
 }
 
 main();
-
-async function test() {
-  const { stdout, stderr } = await execAsync("git status --short");
-
-  if (stderr) {
-    console.error("Error executing git diff:", stderr);
-    return;
-  }
-
-  const files = await Promise.all(
-    stdout
-      .split("\n")
-      .filter(Boolean)
-      .map((line) => line.split(" ").at(-1).trim())
-      .map(async (fileName) => {
-        const { stdout, stderr } = await execAsync(`git diff HEAD ${fileName}`);
-        return {
-          fileName,
-          diff: stderr || stdout.trim(),
-        };
-      })
-  );
-
-  console.log("stdout:", files);
-}
diff --git a/prompts/codeReview.prompt b/prompts/codeReview.prompt
new file mode 100644
index 0000000..d52c79a
--- /dev/null
+++ b/prompts/codeReview.prompt
@@ -0,0 +1,17 @@
+---
+model: googleai/gemini-2.5-flash
+config:
+  temperature: 0.9
+output:
+  schema: ReviewOutputSchema
+---
+You are an AI code reviewer. Review the following code diff and provide a summary and suggestions for improvement:
+Code diff for {{fileName}}:
+\`\`\`{{fileExtension}}
+{{diff}}
+\`\`\`\`
+
+Summary:
+- Provide a brief summary of the code's functionality.
+Suggestions:
+- List any suggestions for improving the code, such as performance optimizations, readability improvements, or best practices.
